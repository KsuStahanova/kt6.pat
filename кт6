   class FlyweightFactory {
        private static Map<String, Flyweight> flyweights = new HashMap<>();
    
        public static Flyweight getFlyweight(String key) {
            if (!flyweights.containsKey(key)) {
                flyweights.put(key, new ConcreteFlyweight(key));
            }
            return flyweights.get(key);
        }
    }
    
  
    interface Flyweight {
        void operation(String extrinsicState);
    }
    

    class ConcreteFlyweight implements Flyweight {
        private String intrinsicState;
    
        public ConcreteFlyweight(String intrinsicState) {
            this.intrinsicState = intrinsicState;
        }
    
        @Override
        public void operation(String extrinsicState) {
            System.out.println("ConcreteFlyweight: " + intrinsicState + " - " + extrinsicState);
        }
    }
    
    
    public class Flyweig {
        public static void main(String[] args) {
            FlyweightFactory flyweightFactory = new FlyweightFactory();
    
            Flyweight flyweight1 = flyweightFactory.getFlyweight("A");
            flyweight1.operation("first extrinsic state");
    
            Flyweight flyweight2 = flyweightFactory.getFlyweight("A");
            flyweight2.operation("second extrinsic state");
    
            Flyweight flyweight3 = flyweightFactory.getFlyweight("B");
            flyweight3.operation("third extrinsic state");
        }
